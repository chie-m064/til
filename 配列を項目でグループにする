# 配列データを時間ごとにグループにする

### 基本データ
```ruby
curriculum_data = [
  ["課題1 アプリの基本設定を行う", 2],
  ["課題2 全ページにヘッダー/フッターを設置", 6],
  ["課題3 Gemを使ってみよう (Bootstrap)", 2],
  ["課題4 sorceryを使用して、ユーザー機能を作成しよう", 16],
  ["Sorcery課題", 4],
  ["課題5 i18nによる日本語化対応", 4],
  ["課題6 フラッシュメッセージの設定", 6],
  ["課題7 デコレーターの導入", 4],
  ["課題8 掲示板の一覧機能の作成", 8],
  ["課題9 掲示板作成機能", 8],
  ["課題10 フォーム入力時エラー情報を個別表示", 4],
  ["BugFix課題", 3],
  ["課題11 掲示板の画像アップロード機能", 12],
  ["課題12 掲示板詳細画面の追加/コメント機能の実装", 16],
  ["課題13 タイトルを動的に出力する", 4],
  ["課題14 掲示板の編集、削除機能の実装", 8],
  ["課題15 ブックマーク機能の追加", 12],
  ["課題16 ブックマークボタンのajax化", 8],
  ["Like課題", 4],
  ["課題17 コメント投稿、削除、編集機能のajax化", 12],
  ["課題18 掲示板のページネーション", 8],
  ["課題19 掲示板の検索機能を実装", 8],
  ["課題20 プロフィール編集機能の実装", 4],
  ["Profile課題", 4],
  ["課題21 パスワードリセット機能の実装", 16],
  ["課題22 [管理画面] 管理画面へのログイン機能、管理画面トップページの作成", 12],
  ["課題23 [管理画面]掲示板/ユーザのCRUD機能の作成", 8],
  ["Admin課題", 4]
]

# 出力
[
  {:hour=>16, :count=>3, :contents=>
    ["課題4 sorceryを使用して、ユーザー機能を作成しよう",
     "課題12 掲示板詳細画面の追加/コメント機能の実装",
     "課題21 パスワードリセット機能の実装"]},
  {:hour=>12, :count=>4, :contents=>
    ["課題11 掲示板の画像アップロード機能",
     "課題15 ブックマーク機能の追加",
     "課題17 コメント投稿、削除、編集機能のajax化",
     "課題22 [管理画面] 管理画面へのログイン機能、管理画面トップページの作成"]},
  ....
]
```
    
## コードの内容
* ```curriculum_date```に格納されたデータを、学習時間（```task[1]```）ごとにグループ化し、各グループの情報（学習時間、課題の数、課題名）を表示するための処理を行っている

### ```group_by```メソッドによるグループ化

```ruby
# task[1](学習時間)でグループ化する
grouped = curriculum_data.group_by { |task| task[1] }
```
```ruby
grouped = {
  2 => [["課題1 アプリの基本設定を行う", 2], ["課題3 Gemを使ってみよう (Bootstrap)", 2]],
  6 => [["課題2 全ページにヘッダー/フッターを設置", 6]],
  16 => [["課題4 sorceryを使用して、ユーザー機能を作成しよう", 16]]
}
```

### ```map```メソッドによる整形
```ruby
grouped_curriculum = grouped.map do |hour, tasks|
  {
    hour: hour,
    count: tasks.size,
    contents: tasks.map { |task| task[0] }
  }
end
```
* ```grouped```（学習時間ごとにグループ化されたハッシュ）を ```map``` メソッドで変換しています。
* ```hour``` はグループ化された学習時間（例えば 2, 4, 6）で、```tasks``` はその学習時間に該当する課題の配列です。
* このブロック内で新たなハッシュを作成しています。このハッシュには以下の3つのキーを設定します:
  * ```hour```: 現在の学習時間（```hour```）
  * ```count```: その学習時間の課題の数（```tasks.size```）
  * ```contents```: その学習時間の課題名を配列として（```tasks.map { |task| task[0] }```）

* ```map```メソッドとは
  * ```map``` メソッドは、配列やコレクションの各要素に対して処理を行い、その結果を新しい配列として返します。
  * 元の配列を変更せず、新しい配列を作成するので、元のデータがそのまま残ります。
  * ```map``` を使うことで、配列やハッシュの変換、抽出、計算などを簡潔に行うことができます。
```ruby
# 基本的な構文
array.map { |element| block }

# attay：対象となる配列
# element：配列の各要素
# block：各要素に適応する処理

# 数字を２倍にする
numbers = [1, 2, 3, 4, 5]
doubled_numbers = numbers.map { |n| n * 2 }

puts doubled_numbers
# 出力: [2, 4, 6, 8, 10]
```

### ```sort_by!```メソッドによる降順ソート
```ruby
grouped_curriculum.sort_by! { |group| -group[:hour] }
```
* ```-group[:hour]``` によって、学習時間（hour）を降順（大きい順）に並べ替えるようにしています。
* ```group[:hour]``` がそのままだと昇順（小さい順）になり、```-group[:hour]```で降順にすることで学習時間が大きい順に並べ替えます。

### ```each```メソッドによる出力
```ruby
grouped_curriculum.each do |group|
  puts "{:hour=>#{group[:hour]}, :count=>#{group[:count]}, :contents=>"
  puts "  #{group[:contents].inspect}}"
  puts "}"
end
```
* ```each``` メソッドを使って、```grouped_curriculum```の各グループ（学習時間ごとの課題リスト）を順番に処理します。
* ```puts``` でグループの内容をフォーマットして表示します。
  * ```group[:hour]```    : 学習時間
  * ```group[:count]```   : 学習時間に該当する課題の数
  * ```group[:contents]```: 学習時間に該当する課題名の配列






































